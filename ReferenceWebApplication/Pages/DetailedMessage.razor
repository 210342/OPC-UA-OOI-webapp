@page "/detailed-message"
@using M2MCommunication
@using MessageParsing
@using System.Text

<h2>Status</h2>

<div class="container-fluid">
    <div class="row">
        <div class="col-9">
            <textarea id="MessageTextArea" rows="10" style="width: 100%;">@Message</textarea>
        </div>
        <div class="col-3">
            <div class="row">
                <div class="col-12">
                    <label>Packages received: </label>
                    <label>@PackagesReceived</label>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <label>Bytes received: </label>
                    <label>@BytesReceived</label>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <button class="btn btn-lg btn-danger" @onclick="GenerateMessage">
                Generate message
            </button>
        </div>
    </div>
</div>

@inject IMessageBus Bus
@inject IMessageReceiver Receiver
@inject IMessageParser Parser
@code 
{
    public int BytesReceived { get; private set; } = 0;
    public int PackagesReceived { get; private set; } = 0;
    public string Message { get; private set; } = string.Empty;

    protected override void OnInitialized()
    {
        Receiver.MessageBus = Bus;
        Receiver.Subscribe(
            new Subscription(M2MCommunication.Message.StaticTypeGuid),
            message => { Parser.Parse(message); UpdateMessage(Message, message); }
        );
    }

    public void UpdateMessage(object updatedObject, IMessage message)
    {
        if (updatedObject is string content)
        {
            StringBuilder builder = new StringBuilder(message.TimeSent.ToShortTimeString()).AppendLine();
            foreach (PrintableProperty property in Parser.PrintableProperties)
            {
                builder.AppendLine($"{property.Name}: {property.Value.ToString()}");
            }
            Message = builder.ToString();
            ++PackagesReceived;
            BytesReceived += message.Size;
        }
    }

    public void GenerateMessage()
    {
        Bus.SendMessage(new Message());
    }
}