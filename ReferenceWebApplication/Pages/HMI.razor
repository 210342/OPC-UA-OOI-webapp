@page "/hmi"
@using ReactiveHMI.ReferenceWebApplication.ReactiveInterface
@using ReactiveHMI.ReferenceWebApplication.Components
@using Microsoft.Extensions.Logging

<div class="container-fluid">
    <h3 class="text-danger text-center font-bordered">@ExceptionMessage</h3>
    <div class="row my-1">
        <div class="col-6 text-center py-1">
            <h3><span class="badge @PackagesReceivedStyle">Packages received: @PackagesReceived</span></h3>
        </div>
        <div class="col-6 text-center py-1">
            <button class="badge-button" @onclick="RefreshConfiguration">
                <h3><span class="badge badge-success">Refresh configuration</span></h3>
            </button>
        </div>
    </div>
    <div class="row my-3 no-gutters">
        <div class="col-12">
            <ImageMessageParser Parser="Parser" />
        </div>
    </div>
    @if (Parser.PrintableProperties.Any())
    {
        <div class="row my-3">
            <div class="col-12">
                <h2 class="mt-6 mb-3" style="font-weight: bold;">Other properties</h2>
                <TextMessageParser Parser="Parser" />
            </div>
        </div>
    }
</div>

@inject IMessageParser Parser
@inject ILogger<HMI> Logger
@code
{
    private string PackagesReceivedStyle => PackagesReceived > 2048 ? "badge-danger" : "badge-primary";

    public int PackagesReceived { get; private set; } = 0;
    public string ExceptionMessage { get; private set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            base.OnInitialized();
            Parser.OnSubscriptionUpdated += OnPropertyChangedAsync;
            await Parser?.InitialiseAsync();
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, ex.Message);
            ExceptionMessage = ex.Message;
        }
    }

    protected async Task OnPropertyChangedAsync()
    {
        await InvokeAsync(() =>
        {
            ++PackagesReceived;
            StateHasChanged();
        });
    }

    private void RefreshConfiguration()
    {
        try
        {
            Parser?.RefreshConfiguration();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
            ExceptionMessage = ex.Message;
        }
    }

    public void Dispose()
    {
        Parser.OnSubscriptionUpdated -= OnPropertyChangedAsync;
    }
}
